// Code generated by cmd/cgo; DO NOT EDIT.

//line /root/go/src/github.com/cypherium/cypher/crypto/bls/mcl.go:1:1
package bls

/*
#cgo bn256 CFLAGS:-DMCLBN_FP_UNIT_SIZE=4
#cgo bn384 CFLAGS:-DMCLBN_FP_UNIT_SIZE=6
#cgo bn384_256 CFLAGS:-DMCLBN_FP_UNIT_SIZE=6 -DMCLBN_FR_UNIT_SIZE=4
#include <mcl/bn.h>

*/
import _ "unsafe"
import "fmt"
import "unsafe"

// CurveFp254BNb -- 254 bit curve
const CurveFp254BNb = ( /*line :15:23*/_Ciconst_mclBn_CurveFp254BNb /*line :15:43*/)

// CurveFp382_1 -- 382 bit curve 1
const CurveFp382_1 = ( /*line :18:22*/_Ciconst_mclBn_CurveFp382_1 /*line :18:41*/)

// CurveFp382_2 -- 382 bit curve 2
const CurveFp382_2 = ( /*line :21:22*/_Ciconst_mclBn_CurveFp382_2 /*line :21:41*/)

// BLS12_381
const BLS12_381 = ( /*line :24:19*/_Ciconst_MCL_BLS12_381 /*line :24:33*/)

// IoSerializeHexStr
const IoSerializeHexStr = ( /*line :27:27*/_Ciconst_MCLBN_IO_SERIALIZE_HEX_STR /*line :27:54*/)

// GetFrUnitSize() --
func GetFrUnitSize() int {
	return int(( /*line :31:13*/_Ciconst_MCLBN_FR_UNIT_SIZE /*line :31:32*/))
}

// GetFpUnitSize() --
// same as GetMaxOpUnitSize()
func GetFpUnitSize() int {
	return int(( /*line :37:13*/_Ciconst_MCLBN_FP_UNIT_SIZE /*line :37:32*/))
}

// GetMaxOpUnitSize --
func GetMaxOpUnitSize() int {
	return int(( /*line :42:13*/_Ciconst_MCLBN_FP_UNIT_SIZE /*line :42:32*/))
}

// GetOpUnitSize --
// the length of Fr is GetOpUnitSize() * 8 bytes
func GetOpUnitSize() int {
	return int(( /*line :48:13*/_Cfunc_mclBn_getOpUnitSize /*line :48:33*/)())
}

// GetCurveOrder --
// return the order of G1
func GetCurveOrder() string {
	buf := make([]byte, 1024)
	// #nosec
	n := ( /*line :56:7*/_Cfunc_mclBn_getCurveOrder /*line :56:27*/)((* /*line :56:31*/_Ctype_char /*line :56:37*/)(unsafe.Pointer(&buf[0])),  /*line :56:65*/_Ctype_size_t /*line :56:73*/(len(buf)))
	if n == 0 {
		panic("implementation err. size of buf is small")
	}
	return string(buf[:n])
}

// GetFieldOrder --
// return the characteristic of the field where a curve is defined
func GetFieldOrder() string {
	buf := make([]byte, 1024)
	// #nosec
	n := ( /*line :68:7*/_Cfunc_mclBn_getFieldOrder /*line :68:27*/)((* /*line :68:31*/_Ctype_char /*line :68:37*/)(unsafe.Pointer(&buf[0])),  /*line :68:65*/_Ctype_size_t /*line :68:73*/(len(buf)))
	if n == 0 {
		panic("implementation err. size of buf is small")
	}
	return string(buf[:n])
}

// Fr --
type Fr struct {
	v  /*line :77:4*/_Ctype_mclBnFr /*line :77:13*/
}

// getPointer --
func (x *Fr) getPointer() (p * /*line :81:31*/_Ctype_mclBnFr /*line :81:40*/) {
	// #nosec
	return (* /*line :83:11*/_Ctype_mclBnFr /*line :83:20*/)(unsafe.Pointer(x))
}

// Clear --
func (x *Fr) Clear() {
	// #nosec
	( /*line :89:2*/_Cfunc_mclBnFr_clear /*line :89:16*/)(x.getPointer())
}

// SetInt64 --
func (x *Fr) SetInt64(v int64) {
	// #nosec
	( /*line :95:2*/_Cfunc_mclBnFr_setInt /*line :95:17*/)(x.getPointer(),  /*line :95:35*/_Ctype_int64_t /*line :95:44*/(v))
}

// SetString --
func (x *Fr) SetString(s string, base int) error {
	buf := []byte(s)
	// #nosec
	err := ( /*line :102:9*/_Cfunc_mclBnFr_setStr /*line :102:24*/)(x.getPointer(), (* /*line :102:44*/_Ctype_char /*line :102:50*/)(unsafe.Pointer(&buf[0])),  /*line :102:78*/_Ctype_size_t /*line :102:86*/(len(buf)),  /*line :102:98*/_Ctype_int /*line :102:103*/(base))
	if err != 0 {
		return fmt.Errorf("err mclBnFr_setStr %x", err)
	}
	return nil
}

// Deserialize --
func (x *Fr) Deserialize(buf []byte) error {
	// #nosec
	err := func() _Ctype_size_t{ var _cgo0 *_Ctype_struct___3 = /*line :112:31*/x.getPointer(); _cgoIndex1 := &/*line :112:63*/buf; _cgo1 := /*line :112:47*/unsafe.Pointer(&(*_cgoIndex1)[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :112:80*/(len(buf)); _cgoCheckPointer(_cgo1, *_cgoIndex1); return /*line :112:91*/_Cfunc_mclBnFr_deserialize(_cgo0, _cgo1, _cgo2); }()
	if err == 0 {
		return fmt.Errorf("err mclBnFr_deserialize %x", buf)
	}
	return nil
}

// SetLittleEndian --
func (x *Fr) SetLittleEndian(buf []byte) error {
	// #nosec
	err := func() _Ctype_int{ var _cgo0 *_Ctype_struct___3 = /*line :122:35*/x.getPointer(); _cgoIndex1 := &/*line :122:67*/buf; _cgo1 := /*line :122:51*/unsafe.Pointer(&(*_cgoIndex1)[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :122:84*/(len(buf)); _cgoCheckPointer(_cgo1, *_cgoIndex1); return /*line :122:95*/_Cfunc_mclBnFr_setLittleEndian(_cgo0, _cgo1, _cgo2); }()
	if err != 0 {
		return fmt.Errorf("err mclBnFr_setLittleEndian %x", err)
	}
	return nil
}

// IsEqual --
func (x *Fr) IsEqual(rhs *Fr) bool {
	return ( /*line :131:9*/_Cfunc_mclBnFr_isEqual /*line :131:25*/)(x.getPointer(), rhs.getPointer()) == 1
}

// IsZero --
func (x *Fr) IsZero() bool {
	return ( /*line :136:9*/_Cfunc_mclBnFr_isZero /*line :136:24*/)(x.getPointer()) == 1
}

// IsOne --
func (x *Fr) IsOne() bool {
	return ( /*line :141:9*/_Cfunc_mclBnFr_isOne /*line :141:23*/)(x.getPointer()) == 1
}

// SetByCSPRNG --
func (x *Fr) SetByCSPRNG() {
	err := ( /*line :146:9*/_Cfunc_mclBnFr_setByCSPRNG /*line :146:29*/)(x.getPointer())
	if err != 0 {
		panic("err mclBnFr_setByCSPRNG")
	}
}

// SetHashOf --
func (x *Fr) SetHashOf(buf []byte) bool {
	// #nosec
	return func() _Ctype_int{ var _cgo0 *_Ctype_struct___3 = /*line :155:29*/x.getPointer(); _cgoIndex1 := &/*line :155:61*/buf; _cgo1 := /*line :155:45*/unsafe.Pointer(&(*_cgoIndex1)[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :155:78*/(len(buf)); _cgoCheckPointer(_cgo1, *_cgoIndex1); return /*line :155:89*/_Cfunc_mclBnFr_setHashOf(_cgo0, _cgo1, _cgo2); }() == 0
}

// GetString --
func (x *Fr) GetString(base int) string {
	buf := make([]byte, 2048)
	// #nosec
	n := ( /*line :162:7*/_Cfunc_mclBnFr_getStr /*line :162:22*/)((* /*line :162:26*/_Ctype_char /*line :162:32*/)(unsafe.Pointer(&buf[0])),  /*line :162:60*/_Ctype_size_t /*line :162:68*/(len(buf)), x.getPointer(),  /*line :162:96*/_Ctype_int /*line :162:101*/(base))
	if n == 0 {
		panic("err mclBnFr_getStr")
	}
	return string(buf[:n])
}

// Serialize --
func (x *Fr) Serialize() []byte {
	buf := make([]byte, 2048)
	// #nosec
	n := func() _Ctype_size_t{ _cgoIndex0 := &/*line :173:43*/buf; _cgo0 := /*line :173:27*/unsafe.Pointer(&(*_cgoIndex0)[0]); var _cgo1 _Ctype_size_t = _Ctype_size_t /*line :173:60*/(len(buf)); var _cgo2 *_Ctype_struct___3 = /*line :173:72*/x.getPointer(); _cgoCheckPointer(_cgo0, *_cgoIndex0); return /*line :173:87*/_Cfunc_mclBnFr_serialize(_cgo0, _cgo1, _cgo2); }()
	if n == 0 {
		panic("err mclBnFr_serialize")
	}
	return buf[:n]
}

// FrNeg --
func FrNeg(out *Fr, x *Fr) {
	( /*line :182:2*/_Cfunc_mclBnFr_neg /*line :182:14*/)(out.getPointer(), x.getPointer())
}

// FrInv --
func FrInv(out *Fr, x *Fr) {
	( /*line :187:2*/_Cfunc_mclBnFr_inv /*line :187:14*/)(out.getPointer(), x.getPointer())
}

// FrAdd --
func FrAdd(out *Fr, x *Fr, y *Fr) {
	( /*line :192:2*/_Cfunc_mclBnFr_add /*line :192:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// FrSub --
func FrSub(out *Fr, x *Fr, y *Fr) {
	( /*line :197:2*/_Cfunc_mclBnFr_sub /*line :197:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// FrMul --
func FrMul(out *Fr, x *Fr, y *Fr) {
	( /*line :202:2*/_Cfunc_mclBnFr_mul /*line :202:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// FrDiv --
func FrDiv(out *Fr, x *Fr, y *Fr) {
	( /*line :207:2*/_Cfunc_mclBnFr_div /*line :207:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// G1 --
type G1 struct {
	v  /*line :212:4*/_Ctype_mclBnG1 /*line :212:13*/
}

// getPointer --
func (x *G1) getPointer() (p * /*line :216:31*/_Ctype_mclBnG1 /*line :216:40*/) {
	// #nosec
	return (* /*line :218:11*/_Ctype_mclBnG1 /*line :218:20*/)(unsafe.Pointer(x))
}

// Clear --
func (x *G1) Clear() {
	// #nosec
	( /*line :224:2*/_Cfunc_mclBnG1_clear /*line :224:16*/)(x.getPointer())
}

// SetString --
func (x *G1) SetString(s string, base int) error {
	buf := []byte(s)
	// #nosec
	err := ( /*line :231:9*/_Cfunc_mclBnG1_setStr /*line :231:24*/)(x.getPointer(), (* /*line :231:44*/_Ctype_char /*line :231:50*/)(unsafe.Pointer(&buf[0])),  /*line :231:78*/_Ctype_size_t /*line :231:86*/(len(buf)),  /*line :231:98*/_Ctype_int /*line :231:103*/(base))
	if err != 0 {
		return fmt.Errorf("err mclBnG1_setStr %x", err)
	}
	return nil
}

// Deserialize --
func (x *G1) Deserialize(buf []byte) error {
	// #nosec
	err := func() _Ctype_size_t{ var _cgo0 *_Ctype_struct___5 = /*line :241:31*/x.getPointer(); _cgoIndex1 := &/*line :241:63*/buf; _cgo1 := /*line :241:47*/unsafe.Pointer(&(*_cgoIndex1)[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :241:80*/(len(buf)); _cgoCheckPointer(_cgo1, *_cgoIndex1); return /*line :241:91*/_Cfunc_mclBnG1_deserialize(_cgo0, _cgo1, _cgo2); }()
	if err == 0 {
		return fmt.Errorf("err mclBnG1_deserialize %x", buf)
	}
	return nil
}

// IsEqual --
func (x *G1) IsEqual(rhs *G1) bool {
	return ( /*line :250:9*/_Cfunc_mclBnG1_isEqual /*line :250:25*/)(x.getPointer(), rhs.getPointer()) == 1
}

// IsZero --
func (x *G1) IsZero() bool {
	return ( /*line :255:9*/_Cfunc_mclBnG1_isZero /*line :255:24*/)(x.getPointer()) == 1
}

// HashAndMapTo --
func (x *G1) HashAndMapTo(buf []byte) error {
	// #nosec
	err := func() _Ctype_int{ var _cgo0 *_Ctype_struct___5 = /*line :261:32*/x.getPointer(); _cgoIndex1 := &/*line :261:64*/buf; _cgo1 := /*line :261:48*/unsafe.Pointer(&(*_cgoIndex1)[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :261:81*/(len(buf)); _cgoCheckPointer(_cgo1, *_cgoIndex1); return /*line :261:92*/_Cfunc_mclBnG1_hashAndMapTo(_cgo0, _cgo1, _cgo2); }()
	if err != 0 {
		return fmt.Errorf("err mclBnG1_hashAndMapTo %x", err)
	}
	return nil
}

// GetString --
func (x *G1) GetString(base int) string {
	buf := make([]byte, 2048)
	// #nosec
	n := ( /*line :272:7*/_Cfunc_mclBnG1_getStr /*line :272:22*/)((* /*line :272:26*/_Ctype_char /*line :272:32*/)(unsafe.Pointer(&buf[0])),  /*line :272:60*/_Ctype_size_t /*line :272:68*/(len(buf)), x.getPointer(),  /*line :272:96*/_Ctype_int /*line :272:101*/(base))
	if n == 0 {
		panic("err mclBnG1_getStr")
	}
	return string(buf[:n])
}

// Serialize --
func (x *G1) Serialize() []byte {
	buf := make([]byte, 2048)
	// #nosec
	n := func() _Ctype_size_t{ _cgoIndex0 := &/*line :283:43*/buf; _cgo0 := /*line :283:27*/unsafe.Pointer(&(*_cgoIndex0)[0]); var _cgo1 _Ctype_size_t = _Ctype_size_t /*line :283:60*/(len(buf)); var _cgo2 *_Ctype_struct___5 = /*line :283:72*/x.getPointer(); _cgoCheckPointer(_cgo0, *_cgoIndex0); return /*line :283:87*/_Cfunc_mclBnG1_serialize(_cgo0, _cgo1, _cgo2); }()
	if n == 0 {
		panic("err mclBnG1_serialize")
	}
	return buf[:n]
}

// G1Neg --
func G1Neg(out *G1, x *G1) {
	( /*line :292:2*/_Cfunc_mclBnG1_neg /*line :292:14*/)(out.getPointer(), x.getPointer())
}

// G1Dbl --
func G1Dbl(out *G1, x *G1) {
	( /*line :297:2*/_Cfunc_mclBnG1_dbl /*line :297:14*/)(out.getPointer(), x.getPointer())
}

// G1Add --
func G1Add(out *G1, x *G1, y *G1) {
	( /*line :302:2*/_Cfunc_mclBnG1_add /*line :302:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// G1Sub --
func G1Sub(out *G1, x *G1, y *G1) {
	( /*line :307:2*/_Cfunc_mclBnG1_sub /*line :307:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// G1Mul --
func G1Mul(out *G1, x *G1, y *Fr) {
	( /*line :312:2*/_Cfunc_mclBnG1_mul /*line :312:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// G1MulCT -- constant time (depending on bit lengh of y)
func G1MulCT(out *G1, x *G1, y *Fr) {
	( /*line :317:2*/_Cfunc_mclBnG1_mulCT /*line :317:16*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// G2 --
type G2 struct {
	v  /*line :322:4*/_Ctype_mclBnG2 /*line :322:13*/
}

// getPointer --
func (x *G2) getPointer() (p * /*line :326:31*/_Ctype_mclBnG2 /*line :326:40*/) {
	// #nosec
	return (* /*line :328:11*/_Ctype_mclBnG2 /*line :328:20*/)(unsafe.Pointer(x))
}

// Clear --
func (x *G2) Clear() {
	// #nosec
	( /*line :334:2*/_Cfunc_mclBnG2_clear /*line :334:16*/)(x.getPointer())
}

// SetString --
func (x *G2) SetString(s string, base int) error {
	buf := []byte(s)
	// #nosec
	err := ( /*line :341:9*/_Cfunc_mclBnG2_setStr /*line :341:24*/)(x.getPointer(), (* /*line :341:44*/_Ctype_char /*line :341:50*/)(unsafe.Pointer(&buf[0])),  /*line :341:78*/_Ctype_size_t /*line :341:86*/(len(buf)),  /*line :341:98*/_Ctype_int /*line :341:103*/(base))
	if err != 0 {
		return fmt.Errorf("err mclBnG2_setStr %x", err)
	}
	return nil
}

// Deserialize --
func (x *G2) Deserialize(buf []byte) error {
	// #nosec
	err := func() _Ctype_size_t{ var _cgo0 *_Ctype_struct___1 = /*line :351:31*/x.getPointer(); _cgoIndex1 := &/*line :351:63*/buf; _cgo1 := /*line :351:47*/unsafe.Pointer(&(*_cgoIndex1)[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :351:80*/(len(buf)); _cgoCheckPointer(_cgo1, *_cgoIndex1); return /*line :351:91*/_Cfunc_mclBnG2_deserialize(_cgo0, _cgo1, _cgo2); }()
	if err == 0 {
		return fmt.Errorf("err mclBnG2_deserialize %x", buf)
	}
	return nil
}

// IsEqual --
func (x *G2) IsEqual(rhs *G2) bool {
	return ( /*line :360:9*/_Cfunc_mclBnG2_isEqual /*line :360:25*/)(x.getPointer(), rhs.getPointer()) == 1
}

// IsZero --
func (x *G2) IsZero() bool {
	return ( /*line :365:9*/_Cfunc_mclBnG2_isZero /*line :365:24*/)(x.getPointer()) == 1
}

// HashAndMapTo --
func (x *G2) HashAndMapTo(buf []byte) error {
	// #nosec
	err := func() _Ctype_int{ var _cgo0 *_Ctype_struct___1 = /*line :371:32*/x.getPointer(); _cgoIndex1 := &/*line :371:64*/buf; _cgo1 := /*line :371:48*/unsafe.Pointer(&(*_cgoIndex1)[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :371:81*/(len(buf)); _cgoCheckPointer(_cgo1, *_cgoIndex1); return /*line :371:92*/_Cfunc_mclBnG2_hashAndMapTo(_cgo0, _cgo1, _cgo2); }()
	if err != 0 {
		return fmt.Errorf("err mclBnG2_hashAndMapTo %x", err)
	}
	return nil
}

// GetString --
func (x *G2) GetString(base int) string {
	buf := make([]byte, 2048)
	// #nosec
	n := ( /*line :382:7*/_Cfunc_mclBnG2_getStr /*line :382:22*/)((* /*line :382:26*/_Ctype_char /*line :382:32*/)(unsafe.Pointer(&buf[0])),  /*line :382:60*/_Ctype_size_t /*line :382:68*/(len(buf)), x.getPointer(),  /*line :382:96*/_Ctype_int /*line :382:101*/(base))
	if n == 0 {
		panic("err mclBnG2_getStr")
	}
	return string(buf[:n])
}

// Serialize --
func (x *G2) Serialize() []byte {
	buf := make([]byte, 2048)
	// #nosec
	n := func() _Ctype_size_t{ _cgoIndex0 := &/*line :393:43*/buf; _cgo0 := /*line :393:27*/unsafe.Pointer(&(*_cgoIndex0)[0]); var _cgo1 _Ctype_size_t = _Ctype_size_t /*line :393:60*/(len(buf)); var _cgo2 *_Ctype_struct___1 = /*line :393:72*/x.getPointer(); _cgoCheckPointer(_cgo0, *_cgoIndex0); return /*line :393:87*/_Cfunc_mclBnG2_serialize(_cgo0, _cgo1, _cgo2); }()
	if n == 0 {
		panic("err mclBnG2_serialize")
	}
	return buf[:n]
}

// G2Neg --
func G2Neg(out *G2, x *G2) {
	( /*line :402:2*/_Cfunc_mclBnG2_neg /*line :402:14*/)(out.getPointer(), x.getPointer())
}

// G2Dbl --
func G2Dbl(out *G2, x *G2) {
	( /*line :407:2*/_Cfunc_mclBnG2_dbl /*line :407:14*/)(out.getPointer(), x.getPointer())
}

// G2Add --
func G2Add(out *G2, x *G2, y *G2) {
	( /*line :412:2*/_Cfunc_mclBnG2_add /*line :412:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// G2Sub --
func G2Sub(out *G2, x *G2, y *G2) {
	( /*line :417:2*/_Cfunc_mclBnG2_sub /*line :417:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// G2Mul --
func G2Mul(out *G2, x *G2, y *Fr) {
	( /*line :422:2*/_Cfunc_mclBnG2_mul /*line :422:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// GT --
type GT struct {
	v  /*line :427:4*/_Ctype_mclBnGT /*line :427:13*/
}

// getPointer --
func (x *GT) getPointer() (p * /*line :431:31*/_Ctype_mclBnGT /*line :431:40*/) {
	// #nosec
	return (* /*line :433:11*/_Ctype_mclBnGT /*line :433:20*/)(unsafe.Pointer(x))
}

// Clear --
func (x *GT) Clear() {
	// #nosec
	( /*line :439:2*/_Cfunc_mclBnGT_clear /*line :439:16*/)(x.getPointer())
}

// SetInt64 --
func (x *GT) SetInt64(v int64) {
	// #nosec
	( /*line :445:2*/_Cfunc_mclBnGT_setInt /*line :445:17*/)(x.getPointer(),  /*line :445:35*/_Ctype_int64_t /*line :445:44*/(v))
}

// SetString --
func (x *GT) SetString(s string, base int) error {
	buf := []byte(s)
	// #nosec
	err := ( /*line :452:9*/_Cfunc_mclBnGT_setStr /*line :452:24*/)(x.getPointer(), (* /*line :452:44*/_Ctype_char /*line :452:50*/)(unsafe.Pointer(&buf[0])),  /*line :452:78*/_Ctype_size_t /*line :452:86*/(len(buf)),  /*line :452:98*/_Ctype_int /*line :452:103*/(base))
	if err != 0 {
		return fmt.Errorf("err mclBnGT_setStr %x", err)
	}
	return nil
}

// Deserialize --
func (x *GT) Deserialize(buf []byte) error {
	// #nosec
	err := func() _Ctype_size_t{ var _cgo0 *_Ctype_struct___10 = /*line :462:31*/x.getPointer(); _cgoIndex1 := &/*line :462:63*/buf; _cgo1 := /*line :462:47*/unsafe.Pointer(&(*_cgoIndex1)[0]); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :462:80*/(len(buf)); _cgoCheckPointer(_cgo1, *_cgoIndex1); return /*line :462:91*/_Cfunc_mclBnGT_deserialize(_cgo0, _cgo1, _cgo2); }()
	if err == 0 {
		return fmt.Errorf("err mclBnGT_deserialize %x", buf)
	}
	return nil
}

// IsEqual --
func (x *GT) IsEqual(rhs *GT) bool {
	return ( /*line :471:9*/_Cfunc_mclBnGT_isEqual /*line :471:25*/)(x.getPointer(), rhs.getPointer()) == 1
}

// IsZero --
func (x *GT) IsZero() bool {
	return ( /*line :476:9*/_Cfunc_mclBnGT_isZero /*line :476:24*/)(x.getPointer()) == 1
}

// IsOne --
func (x *GT) IsOne() bool {
	return ( /*line :481:9*/_Cfunc_mclBnGT_isOne /*line :481:23*/)(x.getPointer()) == 1
}

// GetString --
func (x *GT) GetString(base int) string {
	buf := make([]byte, 2048)
	// #nosec
	n := ( /*line :488:7*/_Cfunc_mclBnGT_getStr /*line :488:22*/)((* /*line :488:26*/_Ctype_char /*line :488:32*/)(unsafe.Pointer(&buf[0])),  /*line :488:60*/_Ctype_size_t /*line :488:68*/(len(buf)), x.getPointer(),  /*line :488:96*/_Ctype_int /*line :488:101*/(base))
	if n == 0 {
		panic("err mclBnGT_getStr")
	}
	return string(buf[:n])
}

// Serialize --
func (x *GT) Serialize() []byte {
	buf := make([]byte, 2048)
	// #nosec
	n := func() _Ctype_size_t{ _cgoIndex0 := &/*line :499:43*/buf; _cgo0 := /*line :499:27*/unsafe.Pointer(&(*_cgoIndex0)[0]); var _cgo1 _Ctype_size_t = _Ctype_size_t /*line :499:60*/(len(buf)); var _cgo2 *_Ctype_struct___10 = /*line :499:72*/x.getPointer(); _cgoCheckPointer(_cgo0, *_cgoIndex0); return /*line :499:87*/_Cfunc_mclBnGT_serialize(_cgo0, _cgo1, _cgo2); }()
	if n == 0 {
		panic("err mclBnGT_serialize")
	}
	return buf[:n]
}

// GTNeg --
func GTNeg(out *GT, x *GT) {
	( /*line :508:2*/_Cfunc_mclBnGT_neg /*line :508:14*/)(out.getPointer(), x.getPointer())
}

// GTInv --
func GTInv(out *GT, x *GT) {
	( /*line :513:2*/_Cfunc_mclBnGT_inv /*line :513:14*/)(out.getPointer(), x.getPointer())
}

// GTAdd --
func GTAdd(out *GT, x *GT, y *GT) {
	( /*line :518:2*/_Cfunc_mclBnGT_add /*line :518:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// GTSub --
func GTSub(out *GT, x *GT, y *GT) {
	( /*line :523:2*/_Cfunc_mclBnGT_sub /*line :523:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// GTMul --
func GTMul(out *GT, x *GT, y *GT) {
	( /*line :528:2*/_Cfunc_mclBnGT_mul /*line :528:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// GTDiv --
func GTDiv(out *GT, x *GT, y *GT) {
	( /*line :533:2*/_Cfunc_mclBnGT_div /*line :533:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// GTPow --
func GTPow(out *GT, x *GT, y *Fr) {
	( /*line :538:2*/_Cfunc_mclBnGT_pow /*line :538:14*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// Pairing --
func Pairing(out *GT, x *G1, y *G2) {
	( /*line :543:2*/_Cfunc_mclBn_pairing /*line :543:16*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// FinalExp --
func FinalExp(out *GT, x *GT) {
	( /*line :548:2*/_Cfunc_mclBn_finalExp /*line :548:17*/)(out.getPointer(), x.getPointer())
}

// MillerLoop --
func MillerLoop(out *GT, x *G1, y *G2) {
	( /*line :553:2*/_Cfunc_mclBn_millerLoop /*line :553:19*/)(out.getPointer(), x.getPointer(), y.getPointer())
}

// GetUint64NumToPrecompute --
func GetUint64NumToPrecompute() int {
	return int(( /*line :558:13*/_Cfunc_mclBn_getUint64NumToPrecompute /*line :558:44*/)())
}

// PrecomputeG2 --
func PrecomputeG2(Qbuf []uint64, Q *G2) {
	// #nosec
	( /*line :564:2*/_Cfunc_mclBn_precomputeG2 /*line :564:21*/)((* /*line :564:25*/_Ctype_uint64_t /*line :564:35*/)(unsafe.Pointer(&Qbuf[0])), Q.getPointer())
}

// PrecomputedMillerLoop --
func PrecomputedMillerLoop(out *GT, P *G1, Qbuf []uint64) {
	// #nosec
	( /*line :570:2*/_Cfunc_mclBn_precomputedMillerLoop /*line :570:30*/)(out.getPointer(), P.getPointer(), (* /*line :570:68*/_Ctype_uint64_t /*line :570:78*/)(unsafe.Pointer(&Qbuf[0])))
}

// PrecomputedMillerLoop2 --
func PrecomputedMillerLoop2(out *GT, P1 *G1, Q1buf []uint64, P2 *G1, Q2buf []uint64) {
	// #nosec
	( /*line :576:2*/_Cfunc_mclBn_precomputedMillerLoop2 /*line :576:31*/)(out.getPointer(), P1.getPointer(), (* /*line :576:70*/_Ctype_uint64_t /*line :576:80*/)(unsafe.Pointer(&Q1buf[0])), P1.getPointer(), (* /*line :576:129*/_Ctype_uint64_t /*line :576:139*/)(unsafe.Pointer(&Q1buf[0])))
}

// FrEvaluatePolynomial -- y = c[0] + c[1] * x + c[2] * x^2 + ...
func FrEvaluatePolynomial(y *Fr, c []Fr, x *Fr) error {
	// #nosec
	err := ( /*line :582:9*/_Cfunc_mclBn_FrEvaluatePolynomial /*line :582:36*/)(y.getPointer(), (* /*line :582:56*/_Ctype_mclBnFr /*line :582:65*/)(unsafe.Pointer(&c[0])), ( /*line :582:92*/_Ctype_size_t /*line :582:100*/)(len(c)), x.getPointer())
	if err != 0 {
		return fmt.Errorf("err mclBn_FrEvaluatePolynomial")
	}
	return nil
}

// G1EvaluatePolynomial -- y = c[0] + c[1] * x + c[2] * x^2 + ...
func G1EvaluatePolynomial(y *G1, c []G1, x *Fr) error {
	// #nosec
	err := ( /*line :592:9*/_Cfunc_mclBn_G1EvaluatePolynomial /*line :592:36*/)(y.getPointer(), (* /*line :592:56*/_Ctype_mclBnG1 /*line :592:65*/)(unsafe.Pointer(&c[0])), ( /*line :592:92*/_Ctype_size_t /*line :592:100*/)(len(c)), x.getPointer())
	if err != 0 {
		return fmt.Errorf("err mclBn_G1EvaluatePolynomial")
	}
	return nil
}

// G2EvaluatePolynomial -- y = c[0] + c[1] * x + c[2] * x^2 + ...
func G2EvaluatePolynomial(y *G2, c []G2, x *Fr) error {
	// #nosec
	err := ( /*line :602:9*/_Cfunc_mclBn_G2EvaluatePolynomial /*line :602:36*/)(y.getPointer(), (* /*line :602:56*/_Ctype_mclBnG2 /*line :602:65*/)(unsafe.Pointer(&c[0])), ( /*line :602:92*/_Ctype_size_t /*line :602:100*/)(len(c)), x.getPointer())
	if err != 0 {
		return fmt.Errorf("err mclBn_G2EvaluatePolynomial")
	}
	return nil
}

// FrLagrangeInterpolation --
func FrLagrangeInterpolation(out *Fr, xVec []Fr, yVec []Fr) error {
	if len(xVec) != len(yVec) {
		return fmt.Errorf("err FrLagrangeInterpolation:bad size")
	}
	// #nosec
	err := ( /*line :615:9*/_Cfunc_mclBn_FrLagrangeInterpolation /*line :615:39*/)(out.getPointer(), (* /*line :615:61*/_Ctype_mclBnFr /*line :615:70*/)(unsafe.Pointer(&xVec[0])), (* /*line :615:101*/_Ctype_mclBnFr /*line :615:110*/)(unsafe.Pointer(&yVec[0])), ( /*line :615:140*/_Ctype_size_t /*line :615:148*/)(len(xVec)))
	if err != 0 {
		return fmt.Errorf("err FrLagrangeInterpolation")
	}
	return nil
}

// G1LagrangeInterpolation --
func G1LagrangeInterpolation(out *G1, xVec []Fr, yVec []G1) error {
	if len(xVec) != len(yVec) {
		return fmt.Errorf("err G1LagrangeInterpolation:bad size")
	}
	// #nosec
	err := ( /*line :628:9*/_Cfunc_mclBn_G1LagrangeInterpolation /*line :628:39*/)(out.getPointer(), (* /*line :628:61*/_Ctype_mclBnFr /*line :628:70*/)(unsafe.Pointer(&xVec[0])), (* /*line :628:101*/_Ctype_mclBnG1 /*line :628:110*/)(unsafe.Pointer(&yVec[0])), ( /*line :628:140*/_Ctype_size_t /*line :628:148*/)(len(xVec)))
	if err != 0 {
		return fmt.Errorf("err G1LagrangeInterpolation")
	}
	return nil
}

// G2LagrangeInterpolation --
func G2LagrangeInterpolation(out *G2, xVec []Fr, yVec []G2) error {
	if len(xVec) != len(yVec) {
		return fmt.Errorf("err G2LagrangeInterpolation:bad size")
	}
	// #nosec
	err := ( /*line :641:9*/_Cfunc_mclBn_G2LagrangeInterpolation /*line :641:39*/)(out.getPointer(), (* /*line :641:61*/_Ctype_mclBnFr /*line :641:70*/)(unsafe.Pointer(&xVec[0])), (* /*line :641:101*/_Ctype_mclBnG2 /*line :641:110*/)(unsafe.Pointer(&yVec[0])), ( /*line :641:140*/_Ctype_size_t /*line :641:148*/)(len(xVec)))
	if err != 0 {
		return fmt.Errorf("err G2LagrangeInterpolation")
	}
	return nil
}
